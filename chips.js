/* These categories are generated by AI for general purpose
 * TODO: Review these categories and workflow of these
 * categories for proper tagging the subcategories instead
 * of categories themselves
 * */
const categories = {
  Context: ["work", "personal", "learning", "research"],
  Purpose: ["idea", "todo", "reference", "draft"],
  Urgency: ["important", "later", "archive"],
  Other: ["ai", "code", "design", "writing"],
};

const defaultChips = Object.keys(categories);

const userAddedChips = [];
const browser = chrome ? chrome : browser;

// const DRAWER_BACKGROUND_COLOR = "#E8EEF2";
const BUTTON_BACKGROUND_COLOR = "#457171";
const ANCHOR_DRAWER_TOGGLER = "#C7D3DD";

let chipDrawer = document.createElement("div");
chipDrawer.style.position = "fixed";
chipDrawer.style.top = 0;
chipDrawer.style.left = "50%";
chipDrawer.style.transform = "translate(-50%, 0%)";
chipDrawer.style.display = "flex";
chipDrawer.style.gap = "4px";
chipDrawer.style.boxShadow = "0.3em 0.3em 1em rgb(13,13,13, 0.4)";

let chipContainer = document.createElement("div");
chipContainer.style.display = "flex";
chipContainer.style.gap = "4px";
chipContainer.style.backgroundColor = "transparent";

let chipDrawerAnchor = document.createElement("button");
chipDrawerAnchor.id = "chip-drawer-anchor";
chipDrawerAnchor.style.backgroundColor = ANCHOR_DRAWER_TOGGLER;
chipDrawerAnchor.style.position = "absolute";
chipDrawerAnchor.style.transform = "translate(50%, calc(100% + 10px))";
chipDrawerAnchor.style.zIndex = 100;
chipDrawerAnchor.style.bottom = 0;
chipDrawerAnchor.style.right = "50%";
chipDrawerAnchor.style.display = "flex";
chipDrawerAnchor.style.gap = "4px";
chipDrawerAnchor.ariaLabel = "open-drawer-anchor";
chipDrawerAnchor.style.padding = "2px 6px 2px 6px";
chipDrawerAnchor.style.height = "10px";

const handleDrawerAnchor = () => {
  if (chipDrawerAnchor.getAttribute("aria-label") !== "open-drawer-anchor") {
    chipDrawerAnchor.setAttribute("aria-label", "open-drawer-anchor");
    chipContainer.style.overflow = "none";
    chipContainer.style.height = "fit-content";
  } else {
    chipDrawerAnchor.setAttribute("aria-label", "down-drawer-anchor");
    chipContainer.style.overflow = "hidden";
    chipContainer.style.height = "0px";
  }
};

chipDrawerAnchor.addEventListener("click", handleDrawerAnchor);

const addStylesToChip = (chip) => {
  chip.style.backgroundColor = BUTTON_BACKGROUND_COLOR;
  chip.style.borderRadius = "8px";
  chip.style.padding = "2px 6px 2px 6px";
};

const createChip = (chip, innerText, onClick) => {
  addStylesToChip(chip);
  chip.innerText = innerText;
  chip.addEventListener("click", (_) => onClick());
  chipContainer.appendChild(chip);
};

const addBrowserUrlToStore = (prevItems, index) => {
  const uniqueUrls = Array.from(
    new Set([...prevItems[`${defaultChips[index]}`], document.location.href]),
  );
  browser.storage.local.set({ [`${defaultChips[index]}`]: uniqueUrls }, () => {
    console.info(
      `${document.location.href} successfully added to the key: ${defaultChips[index]}`,
    );
  });
};

const addKeyToBrowserStoreAndAddCurrentUrl = (index) => {
  console.info("the key was not setup before");
  browser.storage.local.set(
    { [`${defaultChips[index]}`]: [document.location.href] },
    () => {
      browser.storage.local.get([`${defaultChips[index]}`], (item) => {
        console.info(
          `new key setup successful, Added URL: ${document.location.href} to key: ${defaultChips[index]}`,
        );
      });
    },
  );
};

for (let i = 0; i < [...defaultChips, ...userAddedChips].length; i++) {
  let chip = document.createElement("button");

  createChip(chip, defaultChips[i], () => {
    browser.storage.local.get([`${defaultChips[i]}`], (item) => {
      const isKeyAlreadyPresentInStore = `${defaultChips[i]}` in item;
      const isAnyUrlAddedToTheStore = Array.isArray(item[`${defaultChips[i]}`]);

      if (isKeyAlreadyPresentInStore && isAnyUrlAddedToTheStore) {
        addBrowserUrlToStore(item, i, browser);
        return;
      }

      if (!isKeyAlreadyPresentInStore) {
        addKeyToBrowserStoreAndAddCurrentUrl(i);
      } else {
        console.error(
          `there is value already present in key: ${defaultChips[i]}\n`,
          `this part of code should not be reached`,
        );
      }
    });
  });
}

let addButton = document.createElement("button");
createChip(addButton, "+", () => {
  console.log("TODO: Add button implementation is pending");
});

chipDrawer.appendChild(chipContainer);
chipDrawer.appendChild(chipDrawerAnchor);
document.body.appendChild(chipDrawer);
